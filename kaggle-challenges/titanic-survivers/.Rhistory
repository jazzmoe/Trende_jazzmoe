"More than 4 children", "More than 10 children"))
?as.factor
fct_reorder()
=fct_reorder
?fct_reorder
KidsWealthCont$kids <- fct_reorder(KidsWealthCont$kids, c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 4 children", "More than 10 children"))
KidsWealthCont$kids <- fct_reorder(KidsWealthCont$kids, c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children"))
KidsWealthCont$kids <- fct_reorder(as.factor(KidsWealthCont$kids), c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children"))
KidsWealthCont$kids <- fct_relabel(as.factor(KidsWealthCont$kids), c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children"))
KidsWealthCont$kids <- fct_relabel(KidsWealthCont$kids, c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children"))
KidsWealthCont$kids <- fct_relevel(KidsWealthCont$kids, c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children"))
KidsWealthCont$kids <- factor(KidsWealthCont$kids, c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children"))
KidsWealthCont$kids
KidsWealthCont <- DataNFHS[, .(count = .N), by = .(v201, v190)]
KidsWealthCont <- KidsWealthCont %>%  mutate(
kids = ifelse(v201 == 0, "No Children",
ifelse(v201 == 1, "One Child",
ifelse(v201 == 2, "Two Children",
ifelse(v201 == 3, "Three Children",
ifelse(v201 == 4, "Four Children",
ifelse(v201 == 5, "Five Children",
ifelse(v201 %in% c(6:10),
"More than 5 children",
"More than 10 children")))))))) %>%
select(-v201) %>% rename(wealth = v190)
KidsWealthCont <- KidsWealthCont %>%
group_by(wealth, kids) %>%
summarize(count = sum(count)) %>%
spread(wealth, count) %>%
mutate(kids = factor(kids))
View(KidsWealthCont)
?factor
KidsWealthCont <- DataNFHS[, .(count = .N), by = .(v201, v190)]
KidsWealthCont <- KidsWealthCont %>%  mutate(
kids = ifelse(v201 == 0, "No Children",
ifelse(v201 == 1, "One Child",
ifelse(v201 == 2, "Two Children",
ifelse(v201 == 3, "Three Children",
ifelse(v201 == 4, "Four Children",
ifelse(v201 == 5, "Five Children",
ifelse(v201 %in% c(6:10),
"More than 5 children",
"More than 10 children")))))))) %>%
select(-v201) %>% rename(wealth = v190)
KidsWealthTable <- KidsWealthCont %>%
group_by(wealth, kids) %>%
summarize(count = sum(count)) %>%
spread(wealth, count) %>%
mutate(kids = factor(kids, labels = c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children")))
KidsWealthTable <- KidsWealthCont %>%
group_by(wealth, kids) %>%
summarize(count = sum(count)) %>%
spread(wealth, count)
View(KidsWealthTable)
KidsWealthCont <- DataNFHS[, .(count = .N), by = .(v201, v190)]
View(KidsWealthCont)
KidsWealthTable <- KidsWealthCont %>%
group_by(wealth, kids) %>%
summarize(count = sum(count)) %>%
spread(wealth, count) %>%
mutate(kids = factor(kids, labels = c("One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children")))
KidsWealthCont <- DataNFHS[, .(count = .N), by = .(v201, v190)]
KidsWealthCont <- KidsWealthCont %>%  mutate(
kids = ifelse(v201 == 1, "One Child",
ifelse(v201 == 2, "Two Children",
ifelse(v201 == 3, "Three Children",
ifelse(v201 == 4, "Four Children",
ifelse(v201 == 5, "Five Children",
ifelse(v201 %in% c(6:10), "More than 5 children",
"More than 10 children"))))))) %>%
select(-v201) %>%
rename(wealth = v190)
KidsWealthTable <- KidsWealthCont %>%
group_by(wealth, kids) %>%
summarize(count = sum(count)) %>%
spread(wealth, count) %>%
mutate(kids = factor(kids, labels = c("One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children")))
chisq.test(KidsWealthTable)
chisq.test(KidsWealthTable[2:5])
knitr::kable(KidsWealthTable)
# chi squared
chisq.test(KidsWealthTable[2:5])
install.packages("gplots")
library("gplots")
dt <- as.table(as.matrix(KidsWealthTable))
balloonplot(t(dt), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
balloonplot(t(dt[2:5]), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
balloonplot(t(dt[,2:5]), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
balloonplot(t(dt[,2:5]), main ="housetasks", xlab ="", ylab="",
label = TRUE, show.margins = FALSE)
balloonplot(t(dt[,2:5]), main ="housetasks", xlab = t(dt[,1]), ylab="",
label = FALSE, show.margins = FALSE)
balloonplot(t(dt[,2:5]), main ="housetasks", xlab = "", ylab="",
label = FALSE, show.margins = FALSE)
balloonplot(t(dt[,2:6]), main ="housetasks", xlab = "", ylab="",
label = FALSE, show.margins = FALSE)
dt
balloonplot(t(dt[,2:6]), main ="housetasks", xlab = "", ylab=dt[,1],
label = FALSE, show.margins = FALSE)
balloonplot(t(dt[,2:6]), main ="housetasks", xlab = "", ylab=dt[,2],
label = FALSE, show.margins = FALSE)
balloonplot(t(dt[,2:6]), main = "No. of Children and Wealth", xlab = "", ylab = "",
label = FALSE, show.margins = FALSE)
exp(-4.85515960)
# this sets global chunk options; you could set something like this
# knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='figures/...',
#                       echo=FALSE, warning=FALSE, message=FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Clear Global environment
rm(list=ls())
# Setting Working directory
try(setwd("C:/Users/Moritz/OneDrive/Master of Public Policy/3. Semester (Austin, TX)/Discrete Multivariate Models"), silent = TRUE)
# Load Packages
source("packages.r")
source("functions.r")
# Data preparation
Data <- read.table(file = "Week 6-7/Obama08.dat",
col.names = c("state", "pTrue", "n", "y", "pObs"))
# estimate model
model1 <- glmer(pObs ~ 1 + (1 | state), weights = n, data = Data,
family = "binomial", nAGQ=20)
summary(model1)
# retrieve model effects and variance
re <- as_tibble(ranef(model1)) %>% select(grp, condval) # retrieve REs
var.u <- re_var(model1) # retrieve variance
fe <- fixef(model1)[[1]] # retrieve FEs
re %>% head
print(var.u)
icc(model1) # intraclass variation
Data$fitted <- 1/(1 + exp(-(fe + re$condval)))
fitted.mean <- mean(Data$fitted)
# Data$fitted <- predict(model1, newdata = Data, type = "response")
p1 <- ggplot(Data, aes(x = fct_reorder(state, fitted), fitted, y = pTrue)) +
geom_hline(aes(yintercept = fitted.mean), linetype = "dashed", color = "grey70") +
geom_point(color = "red") +
geom_point(aes(y = fitted), shape = 1) +
geom_segment(aes(xend = state, yend = fitted), alpha = .2) +
theme_cust() + scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0, 1))
p2 <- ggplot(Data, aes(x = fct_reorder(state, fitted), y = pObs)) +
geom_hline(aes(yintercept = fitted.mean), linetype = "dashed", color = "grey70") +
geom_point(aes(color = "red")) +
geom_point(aes(y = fitted, color = "black"), shape = 1) +
geom_segment(aes(xend = state, yend = fitted), alpha = .2) +
theme_cust() + scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0, 1)) +
scale_color_identity(name = "",
breaks = c("red", "black"),
labels = c("Top: pTrue \nBottom: pObs", "Fitted Values"),
guide = "legend")
p3 <- ggarrange(p1, p2, nrow = 2)
header <- "Predicting Elections on State Level: \n Benchmarking Predicted Values to pObs and pTrue"
annotate_figure(p3, text_grob(header, face = "bold", size = 12))
mse <- function(x, y) {
err <- purrr::map2_dbl(x, y, function(x, y) {(x - y)^2})
mse <- mean(err)
return(mse)
}
pObs.err <- c(pObs.err = mse(Data$pObs, Data$fitted)) %>% print
pTrue.err <- c(pTrue.err = mse(Data$pTrue, Data$fitted)) %>% print
# Data preparation
Data2 <- read_dta(file = "Week 6-7/nhanes2d.dta")
# replicate models
m1 <- glm(highbp ~ tcresult + age, data = Data2, family = "binomial")
m2 <- glm(highbp ~ tcresult + age + female + black, data = Data2, family = "binomial")
m3 <- glm(highbp ~ tcresult + age + female + black + female*black, data = Data2, family = "binomial")
# Computing the odds ratios
m1.mat <- tibble(coef = c("bConst", "bChol", "bAge"), b = coef(m1)) %>%
mutate(bOdds = exp(b))
kable(m1.mat, caption = "Dependend Variable: Blood Pressure")
# Computing the atmeans probabilities
means <- colMeans(Data2)[c("tcresult", "age")]
marg <- c(mean(margins(m1)$dydx_tcresult), mean(margins(m1)$dydx_age), NA)
m1.mat <- m1.mat %>% mutate(mean = c(means, NA), margin.AME = marg)
kable(m1.mat, caption = "AtMeans Probabilities")
logL.mod2 <- -3665.29
logL.mod3 <- -3660.89
BIC.mod2 <- -2 * logL.mod2 + 5 * log(nrow(Data2))
BIC.mod3 <- -2 * logL.mod3 + 6 * log(nrow(Data2))
tibble(model = c("mod2", "mod3"),
logL = c(logL.mod2, logL.mod3),
BIC = c(BIC.mod2, BIC.mod3))
G.stat <- as.double(-2*(abs(logL.mod2) - abs(logL.mod3)))
1-pchisq(abs(G.stat), 1)
m3.coef <- coef(m3)
black.f <- c(1, means[1:2], 1, 1, 1)
white.f <- c(1, means[1:2], 1, 0, 0)
Ppred.black.f <- 1/(1+exp(-(sum(black.f*m3.coef))))
Ppred.white.f <- 1/(1+exp(-(sum(white.f*m3.coef))))
Ppred.black.f
Ppred.white.f
white.f.age70 <- c(1, 217.67, 70, 1, 0, 0)
Odds.white.f.age70 <- exp(sum(white.f.age70*m3.coef))
Odds.white.f.age70
white.f.age70*m3.coef
m3.odds <- exp(m3.coef)
m3.odds
Odds.white.f.age70 <- m3.odds*white.f.age70
Odds.white.f.age70
Odds.white.f.age70 <- sum(m3.odds*white.f.age70)
Odds.white.f.age70
m3.odds
white.f.age70 <- c(1, 217.67, 70, 1, 0, 0)
m3.odds <- exp(m3.coef)
Odds.white.f.age70 <- sum(m3.odds*white.f.age70)
Odds.black.f.agex <- function(x) {
sum(0.00778809+1.00457580*217.67+1.03980191*x+0.67444989+1.43707571+1.68303988) - Odds.white.f.age70
}
uniroot(Ppred.black.f.agex, interval = c(-1e+08, 1e+08))$`root`
uniroot(Odds.black.f.agex, interval = c(-1e+08, 1e+08))$`root`
Odds.black.f.agex <- function(x) {
sum(0.0078+1.0046*217.67+1.0398*x+0.6744+1.4371+1.6830) - Odds.white.f.age70
}
uniroot(Odds.black.f.agex, interval = c(-1e+08, 1e+08))$`root`
# retrieve model effects and variance
re <- as_tibble(ranef(model1)) %>% select(grp, RE = condval) # retrieve REs
var.u <- re_var(model1) # retrieve variance
fe <- fixef(model1)[[1]] # retrieve FEs
re %>% head
print(var.u)
icc(model1) # intraclass variation
# replicate model
setDT(Data2)
Data2[, agemean:=mean(age), by = location]
Data2[, agemean.dev:=age-agemean, by = location]
m4 <- Data2[,(glmer(highbp ~ tcresult +
agemean.dev + female +
black + black*female + agemean + (1 | location),
data = Data2, family = "binomial", nAGQ=20))]
########################################
### Kaggle Challenge: Titanic Survivers
########################################
### Outline
########################################
### Setup
source("packages.R")
source("functions.R")
# install.packages('e1071', dependencies=TRUE)
############
### Code ###
############
### Load data
Train <- read_csv("./data/train.csv")
Test <- read_csv("./data/test.csv")
SubTemp <- read_csv("./data/gender_submission.csv")
# Variable Notes
# pclass:
source("packages.R")
setwd("C:/Users/Moritz/OneDrive/GitHub/Trende_jazzmoe/kaggle-challenges/titanic-survivers")
########################################
### Kaggle Challenge: Titanic Survivers
########################################
### Outline
########################################
### Setup
rm(list = ls())
source("packages.R")
source("functions.R")
# install.packages('e1071', dependencies=TRUE)
############
### Code ###
############
### Load data
Train <- read_csv("./data/train.csv")
Test <- read_csv("./data/test.csv")
SubTemp <- read_csv("./data/gender_submission.csv")
# Variable Notes
# pclass: A proxy for socio-economic status (SES)
# 1st = Upper
# 2nd = Middle
# 3rd = Lower
#
# age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5
#
# sibsp: The dataset defines family relations in this way...
# Sibling = brother, sister, stepbrother, stepsister
# Spouse = husband, wife (mistresses and fiancés were ignored)
#
# parch: The dataset defines family relations in this way...
# Parent = mother, father
# Child = daughter, son, stepdaughter, stepson
# Some children travelled only with a nanny, therefore parch=0 for them.
### Data prep
names(Train) <- str_to_lower(names(Train))
names(Test) <- str_to_lower(names(Test))
Train <- Train %>% mutate(survived = as.factor(survived),
pclass1 = ifelse(pclass == 1, 1, 0),
pclass2 = ifelse(pclass == 2, 1, 0),
pclass3 = ifelse(pclass == 3, 1, 0))
### define test and training in test set;
splitInd <- createDataPartition(y = Train$survived, p = 0.2, list = FALSE)
Testing <- Train[splitInd,]
Training <- Train[-splitInd,]
#### EDA: exploratory data analysis
# single variables
p1 <- Train %>% ggplot() + geom_histogram(aes(x = age))
p2 <- Train %>% ggplot() + geom_histogram(aes(x = fare))
p3 <- Train %>% ggplot() + geom_bar(aes(x = sex))
p4 <- Train %>% ggplot() + geom_bar(aes(x = pclass))
# variable correlations
TrainCorr <- Train[,c(2, 3, 6, 7, 8, 10)]
library(psych)
p5 <- pairs.panels(TrainCorr) # corr coefficient
var(as.matrix(TrainCorr), na.rm = TRUE) # variance matrix
p6 <- Train %>% ggplot() + geom_boxplot(aes(pclass, fare, group = pclass))
table(Train$sibsp, Train$survived)
chisq.test(Train$sibsp, Train$survived) # significant relationship
View(Train)
table(Train$embarked, Train$survived)
table(Train$embarked, Train$survived)
chisq.test(Train$embarked, Train$survived) # significant relationship
# good source https://www.r-bloggers.com/evaluating-logistic-regression-models/
### machine learning logit (caret) [random forest]
trainData <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE, repeats = 5)
Mod3 <- train(survived ~ sex + pclass + fare + age + sibsp + parch + embarked,
data = Training, trControl = trainData, method = "rf", nTree = 100,
metric = "Accuracy", na.action = na.omit, tuneLength = 5)
emb.surv <- table(Train$embarked, Train$survived)
emb.surv.chisq <- chisq.test(Train$embarked, Train$survived) # significant relationship
summary(Mod3)
confusionMatrix(Mod3)
print(Mod3)
Mod3 <- train(survived ~ sex + pclass + fare + age + embarked,
data = Training, trControl = trainData, method = "rf", nTree = 100,
metric = "Accuracy", na.action = na.omit, tuneLength = 5)
summary(Mod3)
confusionMatrix(Mod3)
print(Mod3)
glimpse(Train)
# variable correlations
TrainCorr <- Train[,c(2, 3, 6, 7, 8, 10, 12)]
library(psych)
p5 <- pairs.panels(TrainCorr) # corr coefficient
# alternative 2
Mod1 <- glm(survived ~ sex + pclass + fare + age + embarked, data = Training, family = "binomial", na.action = na.omit)
Testing <- Testing %>% mutate(
surv.mod1 = ifelse(predict(Mod1, newdata = Testing, type = "response") > 0.6, 1, 0),
surv.mod1 = ifelse(is.na(surv.mod1), 0, identity(surv.mod1)))
# alternative 2
Mod1.2 <- glm(survived ~ sex + pclass + fare + age + embarked, data = Training,
family = "binomial", na.action = na.omit)
Testing <- Testing %>% mutate(
surv.mod1.2 = ifelse(predict(Mod1.2, newdata = Testing, type = "response") > 0.6, 1, 0),
surv.mod1.2 = ifelse(is.na(surv.mod1), 0, identity(surv.mod1.2)))
accuracy(Testing$survived, Testing$surv.mod1.2)
# alternative 2
Mod1.2 <- glm(survived ~ sex + pclass + fare + age + embarked, data = Training,
family = "binomial", na.action = na.omit)
summary(Mod1.2)
Mod1.2 <- glm(survived ~ embarked, data = Training,
family = "binomial", na.action = na.omit)
summary(Mod1.2)
emb.surv <- table(Train$embarked, Train$survived)
emb.surv
# alternative 2
Mod1.2 <- glm(survived ~ sex + pclass + fare + embarked, data = Training,
family = "binomial", na.action = na.omit)
summary(Mod1.2)
# alternative 2
Mod1.2 <- glm(survived ~ sex + pclass + embarked, data = Training,
family = "binomial", na.action = na.omit)
summary(Mod1.2)
##################################################################
### Simple logistic regression
Mod1 <- glm(survived ~ sex + fare, data = Training, family = "binomial", na.action = na.omit)
summary(Mod1)
# alternative / full model
Mod1.1 <- glm(survived ~ sex + fare + pclass + age, data = Training, family = "binomial")
Mod1.1
### treating NAs
# impute age by running a regression on age
purrr::map(Train, ~ is.na())
is.na(Train$age)
sum(is.na(Train$age)))
sum(is.na(Train$age))
### treating NAs
# impute age by running a regression on age
purrr::map(Train, ~ sum(is.na(.x)))
### treating NAs
# impute age by running a regression on age
purrr::map_dfc(Train, ~ sum(is.na(.x)))
### treating NAs
# impute age by running a regression on age
purrr::map_dfr(Train, ~ sum(is.na(.x)))
### treating NAs
# impute age by running a regression on age
naFrame <- purrr::map_dfr(Train, ~ sum(is.na(.x)))
View(naFrame)
### treating NAs
# impute age by running a regression on age
naFrame <- purrr::map_dbl(Train, ~ sum(is.na(.x)))
naFrame
### treating NAs
# impute age by running a regression on age
naFrame <- purrr::map_dbl(Train, ~ sum(is.na(.x))) %>% matrix(nrow = 2)
### treating NAs
# impute age by running a regression on age
naFrame <- purrr::map_dbl(Train, ~ sum(is.na(.x)))
knitr::opts_chunk$set(echo = TRUE)
try(setwd("C:/Users/Moritz/OneDrive/GitHub/Trende_jazzmoe/kaggle-challenges/titanic-survivers"), silent = TRUE)
# include pummy dir
source("00-script.R")
### treating NAs
# impute age by running a regression on age
naFrame <- purrr::map_df(Train, ~ sum(is.na(.x)))
View(naFrame)
### treating NAs
# impute age by running a regression on age
naFrame <- purrr::map_df(Train, ~ sum(is.na(.x)))
naFrame
knitr::opts_chunk$set(echo = TRUE)
try(setwd("C:/Users/Moritz/OneDrive/GitHub/Trende_jazzmoe/kaggle-challenges/titanic-survivers"), silent = TRUE)
# include pummy dir
source("00-script.R")
naFrame %>% kable
naFrame[,c(2:12)] %>% kable
Train <- Train %>% mutate(survived = as.factor(survived),
pclass1 = ifelse(pclass == 1, 1, 0),
pclass2 = ifelse(pclass == 2, 1, 0),
pclass3 = ifelse(pclass == 3, 1, 0),
hasCabin = ifelse(!is.na(cabin), 1, 0))
View(Train)
########################################
### Kaggle Challenge: Titanic Survivers
########################################
### Outline
########################################
### Setup
rm(list = ls())
source("packages.R")
source("functions.R")
# install.packages('e1071', dependencies=TRUE)
############
### Code ###
############
### Load data
Train <- read_csv("./data/train.csv")
Test <- read_csv("./data/test.csv")
SubTemp <- read_csv("./data/gender_submission.csv")
# Variable Notes
# pclass: A proxy for socio-economic status (SES)
# 1st = Upper
# 2nd = Middle
# 3rd = Lower
#
# age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5
#
# sibsp: The dataset defines family relations in this way...
# Sibling = brother, sister, stepbrother, stepsister
# Spouse = husband, wife (mistresses and fiancés were ignored)
#
# parch: The dataset defines family relations in this way...
# Parent = mother, father
# Child = daughter, son, stepdaughter, stepson
# Some children travelled only with a nanny, therefore parch=0 for them.
### Data prep
names(Train) <- str_to_lower(names(Train))
names(Test) <- str_to_lower(names(Test))
Train <- Train %>% mutate(survived = as.factor(survived),
pclass1 = ifelse(pclass == 1, 1, 0),
pclass2 = ifelse(pclass == 2, 1, 0),
pclass3 = ifelse(pclass == 3, 1, 0),
has.cabin = ifelse(!is.na(cabin), 1, 0))
cabin.surv <- table(Train$has.cabin, Train$survived)
cabin.surv
cab.surv.chisq <- chisq.test(Train$has.cabin, Train$survived) # significant relationship
Mod3 <- train(survived ~ sex + pclass + fare + age + embarked + has.cabin,
data = Training, trControl = trainData, method = "rf", nTree = 100,
metric = "Accuracy", na.action = na.omit, tuneLength = 5)
source('C:/Users/Moritz/OneDrive/GitHub/Trende_jazzmoe/kaggle-challenges/titanic-survivers/00-script.R', encoding = 'UTF-8', echo=TRUE)
summary(Mod3)
confusionMatrix(Mod3)
confusionMatrix(Mod3)
print(Mod3)
# variable correlations
TrainCorr <- Train[,c(2, 3, 6, 7, 8, 10, 12, 16)]
library(psych)
p5 <- pairs.panels(TrainCorr) # corr coefficient
p5
cab.surv.chisq <- chisq.test(Train$has.cabin, Train$survived) # significant relationship
cab.surv.chisq
