ggplot(data) + geom_histogram(aes(x = .), stat = "count")
a <- factor(c("a", "b", "c"), labels = c("b", "a", "c"), levels = c("c", "c", "c"))
data <- sample(a, 100, replace = TRUE) %>% data.frame()
ggplot(data) + geom_histogram(aes(x = .), stat = "count")
a <- factor(c("a", "b", "c"), labels = c("b", "a", "c"), levels = c("a", "c", "b"))
data <- sample(a, 100, replace = TRUE) %>% data.frame()
ggplot(data) + geom_histogram(aes(x = .), stat = "count")
a <- factor(c("a", "b", "c"), labels = c("a", "b", "c"), levels = c("a", "c", "b"))
a <- factor(c("a", "b", "c"), labels = c("a", "b", "c"))
data <- sample(a, 100, replace = TRUE) %>% data.frame()
ggplot(data) + geom_histogram(aes(x = .), stat = "count")
a <- factor(c("a", "b", "c"), labels = c("a", "b", "c")), levels = c("-1", "0", "1")
data <- sample(a, 100, replace = TRUE) %>% data.frame()
ggplot(data) + geom_histogram(aes(x = .), stat = "count")
a <- factor(c("a", "b", "c"), labels = c("a", "b", "c"), levels = c("-1", "0", "1"))
data <- sample(a, 100, replace = TRUE) %>% data.frame()
ggplot(data) + geom_histogram(aes(x = .), stat = "count")
a <- factor(c("a", "b", "c"), labels = c("a", "b", "c"), levels = c("-1", "0", "1"))
data <- sample(a, 100, replace = TRUE) %>% data.frame()
ggplot(data) + geom_histogram(aes(x = .), stat = "count")
a <- factor(c("a", "b", "c"), labels = c("a", "b", "c"), levels = c("c", "b", "a"))
data <- sample(a, 100, replace = TRUE) %>% data.frame()
ggplot(data) + geom_histogram(aes(x = .), stat = "count")
df <- data.frame(v=c(1,2,3),f=c('a','b','c'))
b <- factor(df$f, levels=c('a','b','c'),
labels=c('Treatment A: XYZ','Treatment B: YZX','Treatment C: ZYX'))
df$b <- b
c <- factor(c('Treatment A: XYZ','Treatment B: YZX','Treatment C: ZYX'), levels=c('a','b','c'),
labels=c('Treatment A: XYZ','Treatment B: YZX','Treatment C: ZYX'))
# this sets global chunk options; you could set something like this
# knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='figures/...',
#                       echo=FALSE, warning=FALSE, message=FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Clear Global environment
rm(list=ls())
# Setting Working directory
try(setwd("C:/Users/Moritz/OneDrive/Master of Public Policy/3. Semester (Austin, TX)/Statistical Reasoning"), silent = TRUE)
# Load Packages
source("packages.r")
source("functions.r")
# globally turn off warnings
#options(warn=-1)
# Load Source Code
# source("Assignment_1.R")
# Load NFHS India data
DataNFHS <- fread("./Datasets/NFHS3_India.csv")
# Setting Working directory
setwd("C:/Users/Moritz/OneDrive/Master of Public Policy/3. Semester (Austin, TX)/Statistical Reasoning")
# Load NFHS India data
DataNFHS <- fread("./Datasets/NFHS3_India.csv")
DataNFHS[,.{table(v201)}]
DataNFHS[,.(table(v201))]
DataNFHS[,.(table("v201"))]
DataNFHS[1:3]
View(DataNFHS)
DataNFHS[, .(Count = .N)]
DataNFHS[, .(v201)]
DataNFHS[, table(.(v201))]
wealth <- DataNFHS[, table(.(v190))]
wealth
wealth <- DataNFHS[, table(.(v201),.(v190))]
welath
welath
wealth
KidsWealthCont <- DataNFHS[, .(count = N), by = .(v201, v190)]
KidsWealthCont <- DataNFHS[, .(count = .N), by = .(v201, v190)]
View(KidsWealthCont)
class(DataNFHS)
KidsWealthCont <- mutate(
kids = ifelse(v201 == 0, "No Children",
ifelse(v201 == 1, "One Child",
ifelse(v201 == 2, "Two Children",
ifelse(v201 == 3, "Three Children",
ifelse(v201 == 4, "Four Children",
ifelse(v201 == 5, "Five Children",
ifelse(v201 %in% c(6:10),
"More than 5 children",
"More than 10")))))))))
KidsWealthCont <- mutate(
kids = ifelse(v201 == 0, "No Children",
ifelse(v201 == 1, "One Child",
ifelse(v201 == 2, "Two Children",
ifelse(v201 == 3, "Three Children",
ifelse(v201 == 4, "Four Children",
ifelse(v201 == 5, "Five Children",
ifelse(v201 %in% c(6:10),
"More than 5 children",
"More than 10"))))))))
KidsWealthCont <-KidsWealthCont %>%  mutate(
kids = ifelse(v201 == 0, "No Children",
ifelse(v201 == 1, "One Child",
ifelse(v201 == 2, "Two Children",
ifelse(v201 == 3, "Three Children",
ifelse(v201 == 4, "Four Children",
ifelse(v201 == 5, "Five Children",
ifelse(v201 %in% c(6:10),
"More than 5 children",
"More than 10"))))))))
View(KidsWealthCont)
KidsWealthCont <- KidsWealthCont %>%
spread(v190, count)
kidsFreq <- DataNFHS[, table(.(v201))]
KidsWealthCont <- DataNFHS[, .(count = .N), by = .(v201, v190)]
KidsWealthCont <-KidsWealthCont %>%  mutate(
kids = ifelse(v201 == 0, "No Children",
ifelse(v201 == 1, "One Child",
ifelse(v201 == 2, "Two Children",
ifelse(v201 == 3, "Three Children",
ifelse(v201 == 4, "Four Children",
ifelse(v201 == 5, "Five Children",
ifelse(v201 %in% c(6:10),
"More than 5 children",
"More than 10")))))))) %>% select(-v201)
KidsWealthCont <- KidsWealthCont %>%
spread(v190, count)
?spread
kidsFreq <- DataNFHS[, table(.(v201))]
KidsWealthCont <- DataNFHS[, .(count = .N), by = .(v201, v190)]
KidsWealthCont <-KidsWealthCont %>%  mutate(
kids = ifelse(v201 == 0, "No Children",
ifelse(v201 == 1, "One Child",
ifelse(v201 == 2, "Two Children",
ifelse(v201 == 3, "Three Children",
ifelse(v201 == 4, "Four Children",
ifelse(v201 == 5, "Five Children",
ifelse(v201 %in% c(6:10),
"More than 5 children",
"More than 10"))))))))
kidsFreq <- DataNFHS[, table(.(v201))]
KidsWealthCont <- DataNFHS[, .(count = .N), by = .(v201, v190)]
KidsWealthCont <- KidsWealthCont %>%  mutate(
kids = ifelse(v201 == 0, "No Children",
ifelse(v201 == 1, "One Child",
ifelse(v201 == 2, "Two Children",
ifelse(v201 == 3, "Three Children",
ifelse(v201 == 4, "Four Children",
ifelse(v201 == 5, "Five Children",
ifelse(v201 %in% c(6:10),
"More than 5 children",
"More than 10")))))))) %>%
select(-v201) %>% rename(wealth = v190)
KidsWealthCont <- KidsWealthCont %>%
group_by(v190, kids) %>%
mutate(count = sum(count))
KidsWealthCont <- KidsWealthCont %>%
group_by(wealth, kids) %>%
mutate(count = sum(count))
KidsWealthCont <- DataNFHS[, .(count = .N), by = .(v201, v190)]
KidsWealthCont <- KidsWealthCont %>%  mutate(
kids = ifelse(v201 == 0, "No Children",
ifelse(v201 == 1, "One Child",
ifelse(v201 == 2, "Two Children",
ifelse(v201 == 3, "Three Children",
ifelse(v201 == 4, "Four Children",
ifelse(v201 == 5, "Five Children",
ifelse(v201 %in% c(6:10),
"More than 5 children",
"More than 10")))))))) %>%
select(-v201) %>% rename(wealth = v190)
KidsWealthCont <- KidsWealthCont %>%
group_by(wealth, kids) %>%
summarize(count = sum(count))
KidsWealthCont <- DataNFHS[, .(count = .N), by = .(v201, v190)]
KidsWealthCont <- KidsWealthCont %>%  mutate(
kids = ifelse(v201 == 0, "No Children",
ifelse(v201 == 1, "One Child",
ifelse(v201 == 2, "Two Children",
ifelse(v201 == 3, "Three Children",
ifelse(v201 == 4, "Four Children",
ifelse(v201 == 5, "Five Children",
ifelse(v201 %in% c(6:10),
"More than 5 children",
"More than 10")))))))) %>%
select(-v201) %>% rename(wealth = v190)
KidsWealthCont <- KidsWealthCont %>%
group_by(wealth, kids) %>%
summarize(count = sum(count)) %>%
spread(wealth, count)
KidsWealthCont$kids <- as_factor(KidsWealthCont$kids,
label = c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 4 children", "More than 10 children"))
KidsWealthCont$kids
KidsWealthCont$kids <- as_factor(KidsWealthCont$kids,
level= c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 4 children", "More than 10 children"))
KidsWealthCont$kids
KidsWealthCont$kids <- fct_reorder(KidsWealthCont$kids,
label = c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 4 children", "More than 10 children"))
?as.factor
fct_reorder()
=fct_reorder
?fct_reorder
KidsWealthCont$kids <- fct_reorder(KidsWealthCont$kids, c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 4 children", "More than 10 children"))
KidsWealthCont$kids <- fct_reorder(KidsWealthCont$kids, c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children"))
KidsWealthCont$kids <- fct_reorder(as.factor(KidsWealthCont$kids), c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children"))
KidsWealthCont$kids <- fct_relabel(as.factor(KidsWealthCont$kids), c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children"))
KidsWealthCont$kids <- fct_relabel(KidsWealthCont$kids, c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children"))
KidsWealthCont$kids <- fct_relevel(KidsWealthCont$kids, c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children"))
KidsWealthCont$kids <- factor(KidsWealthCont$kids, c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children"))
KidsWealthCont$kids
KidsWealthCont <- DataNFHS[, .(count = .N), by = .(v201, v190)]
KidsWealthCont <- KidsWealthCont %>%  mutate(
kids = ifelse(v201 == 0, "No Children",
ifelse(v201 == 1, "One Child",
ifelse(v201 == 2, "Two Children",
ifelse(v201 == 3, "Three Children",
ifelse(v201 == 4, "Four Children",
ifelse(v201 == 5, "Five Children",
ifelse(v201 %in% c(6:10),
"More than 5 children",
"More than 10 children")))))))) %>%
select(-v201) %>% rename(wealth = v190)
KidsWealthCont <- KidsWealthCont %>%
group_by(wealth, kids) %>%
summarize(count = sum(count)) %>%
spread(wealth, count) %>%
mutate(kids = factor(kids))
View(KidsWealthCont)
?factor
KidsWealthCont <- DataNFHS[, .(count = .N), by = .(v201, v190)]
KidsWealthCont <- KidsWealthCont %>%  mutate(
kids = ifelse(v201 == 0, "No Children",
ifelse(v201 == 1, "One Child",
ifelse(v201 == 2, "Two Children",
ifelse(v201 == 3, "Three Children",
ifelse(v201 == 4, "Four Children",
ifelse(v201 == 5, "Five Children",
ifelse(v201 %in% c(6:10),
"More than 5 children",
"More than 10 children")))))))) %>%
select(-v201) %>% rename(wealth = v190)
KidsWealthTable <- KidsWealthCont %>%
group_by(wealth, kids) %>%
summarize(count = sum(count)) %>%
spread(wealth, count) %>%
mutate(kids = factor(kids, labels = c("No Children", "One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children")))
KidsWealthTable <- KidsWealthCont %>%
group_by(wealth, kids) %>%
summarize(count = sum(count)) %>%
spread(wealth, count)
View(KidsWealthTable)
KidsWealthCont <- DataNFHS[, .(count = .N), by = .(v201, v190)]
View(KidsWealthCont)
KidsWealthTable <- KidsWealthCont %>%
group_by(wealth, kids) %>%
summarize(count = sum(count)) %>%
spread(wealth, count) %>%
mutate(kids = factor(kids, labels = c("One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children")))
KidsWealthCont <- DataNFHS[, .(count = .N), by = .(v201, v190)]
KidsWealthCont <- KidsWealthCont %>%  mutate(
kids = ifelse(v201 == 1, "One Child",
ifelse(v201 == 2, "Two Children",
ifelse(v201 == 3, "Three Children",
ifelse(v201 == 4, "Four Children",
ifelse(v201 == 5, "Five Children",
ifelse(v201 %in% c(6:10), "More than 5 children",
"More than 10 children"))))))) %>%
select(-v201) %>%
rename(wealth = v190)
KidsWealthTable <- KidsWealthCont %>%
group_by(wealth, kids) %>%
summarize(count = sum(count)) %>%
spread(wealth, count) %>%
mutate(kids = factor(kids, labels = c("One Child",
"Two Children", "Three Children",
"Four Children", "Five Children",
"More than 5 children", "More than 10 children")))
chisq.test(KidsWealthTable)
chisq.test(KidsWealthTable[2:5])
knitr::kable(KidsWealthTable)
# chi squared
chisq.test(KidsWealthTable[2:5])
install.packages("gplots")
library("gplots")
dt <- as.table(as.matrix(KidsWealthTable))
balloonplot(t(dt), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
balloonplot(t(dt[2:5]), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
balloonplot(t(dt[,2:5]), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
balloonplot(t(dt[,2:5]), main ="housetasks", xlab ="", ylab="",
label = TRUE, show.margins = FALSE)
balloonplot(t(dt[,2:5]), main ="housetasks", xlab = t(dt[,1]), ylab="",
label = FALSE, show.margins = FALSE)
balloonplot(t(dt[,2:5]), main ="housetasks", xlab = "", ylab="",
label = FALSE, show.margins = FALSE)
balloonplot(t(dt[,2:6]), main ="housetasks", xlab = "", ylab="",
label = FALSE, show.margins = FALSE)
dt
balloonplot(t(dt[,2:6]), main ="housetasks", xlab = "", ylab=dt[,1],
label = FALSE, show.margins = FALSE)
balloonplot(t(dt[,2:6]), main ="housetasks", xlab = "", ylab=dt[,2],
label = FALSE, show.margins = FALSE)
balloonplot(t(dt[,2:6]), main = "No. of Children and Wealth", xlab = "", ylab = "",
label = FALSE, show.margins = FALSE)
exp(-4.85515960)
# this sets global chunk options; you could set something like this
# knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='figures/...',
#                       echo=FALSE, warning=FALSE, message=FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Clear Global environment
rm(list=ls())
# Setting Working directory
try(setwd("C:/Users/Moritz/OneDrive/Master of Public Policy/3. Semester (Austin, TX)/Discrete Multivariate Models"), silent = TRUE)
# Load Packages
source("packages.r")
source("functions.r")
# Data preparation
Data <- read.table(file = "Week 6-7/Obama08.dat",
col.names = c("state", "pTrue", "n", "y", "pObs"))
# estimate model
model1 <- glmer(pObs ~ 1 + (1 | state), weights = n, data = Data,
family = "binomial", nAGQ=20)
summary(model1)
# retrieve model effects and variance
re <- as_tibble(ranef(model1)) %>% select(grp, condval) # retrieve REs
var.u <- re_var(model1) # retrieve variance
fe <- fixef(model1)[[1]] # retrieve FEs
re %>% head
print(var.u)
icc(model1) # intraclass variation
Data$fitted <- 1/(1 + exp(-(fe + re$condval)))
fitted.mean <- mean(Data$fitted)
# Data$fitted <- predict(model1, newdata = Data, type = "response")
p1 <- ggplot(Data, aes(x = fct_reorder(state, fitted), fitted, y = pTrue)) +
geom_hline(aes(yintercept = fitted.mean), linetype = "dashed", color = "grey70") +
geom_point(color = "red") +
geom_point(aes(y = fitted), shape = 1) +
geom_segment(aes(xend = state, yend = fitted), alpha = .2) +
theme_cust() + scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0, 1))
p2 <- ggplot(Data, aes(x = fct_reorder(state, fitted), y = pObs)) +
geom_hline(aes(yintercept = fitted.mean), linetype = "dashed", color = "grey70") +
geom_point(aes(color = "red")) +
geom_point(aes(y = fitted, color = "black"), shape = 1) +
geom_segment(aes(xend = state, yend = fitted), alpha = .2) +
theme_cust() + scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0, 1)) +
scale_color_identity(name = "",
breaks = c("red", "black"),
labels = c("Top: pTrue \nBottom: pObs", "Fitted Values"),
guide = "legend")
p3 <- ggarrange(p1, p2, nrow = 2)
header <- "Predicting Elections on State Level: \n Benchmarking Predicted Values to pObs and pTrue"
annotate_figure(p3, text_grob(header, face = "bold", size = 12))
mse <- function(x, y) {
err <- purrr::map2_dbl(x, y, function(x, y) {(x - y)^2})
mse <- mean(err)
return(mse)
}
pObs.err <- c(pObs.err = mse(Data$pObs, Data$fitted)) %>% print
pTrue.err <- c(pTrue.err = mse(Data$pTrue, Data$fitted)) %>% print
# Data preparation
Data2 <- read_dta(file = "Week 6-7/nhanes2d.dta")
# replicate models
m1 <- glm(highbp ~ tcresult + age, data = Data2, family = "binomial")
m2 <- glm(highbp ~ tcresult + age + female + black, data = Data2, family = "binomial")
m3 <- glm(highbp ~ tcresult + age + female + black + female*black, data = Data2, family = "binomial")
# Computing the odds ratios
m1.mat <- tibble(coef = c("bConst", "bChol", "bAge"), b = coef(m1)) %>%
mutate(bOdds = exp(b))
kable(m1.mat, caption = "Dependend Variable: Blood Pressure")
# Computing the atmeans probabilities
means <- colMeans(Data2)[c("tcresult", "age")]
marg <- c(mean(margins(m1)$dydx_tcresult), mean(margins(m1)$dydx_age), NA)
m1.mat <- m1.mat %>% mutate(mean = c(means, NA), margin.AME = marg)
kable(m1.mat, caption = "AtMeans Probabilities")
logL.mod2 <- -3665.29
logL.mod3 <- -3660.89
BIC.mod2 <- -2 * logL.mod2 + 5 * log(nrow(Data2))
BIC.mod3 <- -2 * logL.mod3 + 6 * log(nrow(Data2))
tibble(model = c("mod2", "mod3"),
logL = c(logL.mod2, logL.mod3),
BIC = c(BIC.mod2, BIC.mod3))
G.stat <- as.double(-2*(abs(logL.mod2) - abs(logL.mod3)))
1-pchisq(abs(G.stat), 1)
m3.coef <- coef(m3)
black.f <- c(1, means[1:2], 1, 1, 1)
white.f <- c(1, means[1:2], 1, 0, 0)
Ppred.black.f <- 1/(1+exp(-(sum(black.f*m3.coef))))
Ppred.white.f <- 1/(1+exp(-(sum(white.f*m3.coef))))
Ppred.black.f
Ppred.white.f
white.f.age70 <- c(1, 217.67, 70, 1, 0, 0)
Odds.white.f.age70 <- exp(sum(white.f.age70*m3.coef))
Odds.white.f.age70
white.f.age70*m3.coef
m3.odds <- exp(m3.coef)
m3.odds
Odds.white.f.age70 <- m3.odds*white.f.age70
Odds.white.f.age70
Odds.white.f.age70 <- sum(m3.odds*white.f.age70)
Odds.white.f.age70
m3.odds
white.f.age70 <- c(1, 217.67, 70, 1, 0, 0)
m3.odds <- exp(m3.coef)
Odds.white.f.age70 <- sum(m3.odds*white.f.age70)
Odds.black.f.agex <- function(x) {
sum(0.00778809+1.00457580*217.67+1.03980191*x+0.67444989+1.43707571+1.68303988) - Odds.white.f.age70
}
uniroot(Ppred.black.f.agex, interval = c(-1e+08, 1e+08))$`root`
uniroot(Odds.black.f.agex, interval = c(-1e+08, 1e+08))$`root`
Odds.black.f.agex <- function(x) {
sum(0.0078+1.0046*217.67+1.0398*x+0.6744+1.4371+1.6830) - Odds.white.f.age70
}
uniroot(Odds.black.f.agex, interval = c(-1e+08, 1e+08))$`root`
# retrieve model effects and variance
re <- as_tibble(ranef(model1)) %>% select(grp, RE = condval) # retrieve REs
var.u <- re_var(model1) # retrieve variance
fe <- fixef(model1)[[1]] # retrieve FEs
re %>% head
print(var.u)
icc(model1) # intraclass variation
# replicate model
setDT(Data2)
Data2[, agemean:=mean(age), by = location]
Data2[, agemean.dev:=age-agemean, by = location]
m4 <- Data2[,(glmer(highbp ~ tcresult +
agemean.dev + female +
black + black*female + agemean + (1 | location),
data = Data2, family = "binomial", nAGQ=20))]
########################################
### Kaggle Challenge: Titanic Survivers
########################################
### Outline
########################################
### Setup
source("packages.R")
source("functions.R")
# install.packages('e1071', dependencies=TRUE)
############
### Code ###
############
### Load data
Train <- read_csv("./data/train.csv")
Test <- read_csv("./data/test.csv")
SubTemp <- read_csv("./data/gender_submission.csv")
# Variable Notes
# pclass:
source("packages.R")
Setup
try(setwd("C:/Users/Moritz/OneDrive/GitHub/Trende_jazzmoe/kaggle-challenges/titanic-survivers"), silent = TRUE)
rm(list = ls())
source("packages.R")
source("functions.R")
# install.packages('e1071', dependencies=TRUE)
# install.packages("RANN") # for knearest neighbor imputation
library(RANN) # for preprocessing knnImpute
load("./data/Full.RData")
##################################################################
### Modelling ####################################################
##################################################################
Train2 <- Full[!is.na(Full$survived),]
Test2 <- Full[is.na(Full$survived),]
### define test and training in test set;
splitInd <- createDataPartition(y = Train2$survived, p = 0.2, list = FALSE)
Testing <- Train2[splitInd,]
Training <- Train2[-splitInd,]
## other rf
library(party)
set.seed(415)
## other rf
library(party)
set.seed(415)
trControl <- trainControl(method  = "repeatedcv", number = 5, repeats = 3, verboseIter = TRUE)
glimse(Train2)
glimpse(Train2)
trControl <- trainControl(method  = "repeatedcv", number = 5, repeats = 3, verboseIter = TRUE)
mod.fit <- train(survived ~ SlogL + sex + cabin.class + as.factor(family.size), data = Train2,
metric = "Accuracy", trControl = trControl, method = "cforest",
controls = cforest_unbiased(ntree = 101, mtry = 3))
confusionMatrix(mod.fit)
TestSub <- Test2 %>% mutate(Survived = predict(mod.fit, newdata = Test2, OOB = TRUE, type = "response")) %>%
rename(PassengerId = passengerid)
predict(mod.fit, newdata = Test2, OOB = TRUE)
TestSub <- Test2 %>% mutate(Survived = predict(mod.fit, newdata = Test2, OOB = TRUE)) %>%
rename(PassengerId = passengerid)
Submission <- TestSub[,c("PassengerId", "Survived")] %>% mutate(Survived = ifelse(Survived == "Died", 0, 1))
write_excel_csv(Submission, path = "C:/Users/Moritz/OneDrive/submission.csv", col_names = TRUE)
