y_quo <- enquo(y)
ggplot(data) + geom_boxplot(aes(x = !! x_quo, y = !! y_quo, group = !! x_quo)) +
theme_bw()
}
# compute plots
vars <- dplyr::select(Auto, -name) %>% names(.)
plots <- map(vars, ~ plot.fun(Auto, mpg01, .x))
# plot
plot_grid(plotlist = plots, ncol = 3)
split <- createDataPartition(y = Auto$mpg01, p = 0.4, list = FALSE)
Train <- Auto[split,]
Test <- Auto[-split,]
mod.1 <- glm(mpg01 ~ displacement + horsepower + weight + year + cylinders,
data = Train, family = binomial("logit"))
predict(mod.1, newdata = Test, type = "response")
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
roc(Test$mpg01, Test$mpg01.p)
?roc
auc(roc)
roc <- roc(Test$mpg01, Test$mpg01.p)
auc(roc)
auc(roc)
auc(roc) %>% as_tibble(AUC = .)
auc(roc)
aus <- as_tibble(AUC = auc(roc))
aus <- tibble(AUC = auc(roc))
View(aus)
aus <- tribble(~ AUC,
auc(roc))
View(aus)
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value
moc, "auc", auc(roc))
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value
moc, "auc", auc(x))
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value
mod, "auc", auc(x))
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value,
mod, "auc", auc(x))
}
roc.stats("logit", Test$mpg01, Test$mpg01.p)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > "0.9784", 1, 0))
mod.1 <- glm(mpg01 ~ displacement + horsepower + weight + year + cylinders,
data = Train, family = binomial("logit"))
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "prob")
?predict
Test$mpg01.p <- stats::predict(mod.1, newdata = Test, type = "prob")
Test$mpg01.p <- caret::predict(mod.1, newdata = Test, type = "prob")
Test$mpg01.p <- glm::predict(mod.1, newdata = Test, type = "prob")
Test$mpg01.p <- glmnet::predict(mod.1, newdata = Test, type = "prob")
Test$mpg01.p <- ^MASS::predict(mod.1, newdata = Test, type = "prob")
Test$mpg01.p <- MASS::predict(mod.1, newdata = Test, type = "prob")
Test$mpg01.p <- car::predict(mod.1, newdata = Test, type = "prob")
Test$mpg01.p <- randomForest::predict(mod.1, newdata = Test, type = "prob")
Test$mpg01.p <- predict.train(mod.1, newdata = Test, type = "prob")
Test$mpg01.p <- predict.train(mod.1, newdata = Test)
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
range(Test$mpg01.p)
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
roc.stats("logit", Test$mpg01, Test$mpg01.p)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > "0.9784", 1, 0))
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > "0.9784", 1, 0),
false.pred = ifelse(mpg01.p != mpg01, 1, 0))
sum(Test$false.pred/nrow(Test))
roc.stats("logit", Test$mpg01, Test$mpg01.p)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > "0.9784", 1, 0),
false.pred = ifelse(mpg01.p != mpg01, 1, 0))
sum(Test$false.pred/nrow(Test))
nrow(Test)
sum(Test$false.pred)/nrow(Test))
mean(Test$false.pred)
table(Test$false.pred)
mod.1 <- glm(mpg01 ~ displacement + horsepower + weight + year + cylinders,
data = Train, family = binomial("logit"))
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
roc <- roc(Test$mpg01, Test$mpg01.p)
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value,
mod, "auc", auc(x))
}
roc.stats("logit", Test$mpg01, Test$mpg01.p)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > "0.9784", 1, 0),
false.pred = ifelse(mpg01.p != mpg01, 0, 1))
knitr::opts_chunk$set(
warnings = FALSE, include = FALSE, echo = FALSE, fig.align = "center", fig.width = 10, fig.height = 8)
packages <- c("purrr", "tidyverse", "caret", "ISLR", "GGally", "rlang", "cowplot", "pROC")
lapply(packages, require, character.only = TRUE)
# source("../../packages.r")
Auto <- Auto %>% mutate(mpg01 = ifelse(mpg > median(mpg, na.rm = TRUE), 1, 0))
Auto %>% dplyr::select(-name) %>% ggpairs
knitr::opts_chunk$set(
warnings = FALSE, include = FALSE, echo = FALSE, fig.align = "center", fig.width = 10, fig.height = 8)
packages <- c("purrr", "tidyverse", "caret", "ISLR", "GGally", "rlang", "cowplot", "pROC")
lapply(packages, require, character.only = TRUE)
# source("../../packages.r")
Auto <- Auto %>% mutate(mpg01 = ifelse(mpg > median(mpg, na.rm = TRUE), 1, 0))
Auto %>% dplyr::select(-name) %>% ggpairs
plot.fun <- function(data, x, y) {
y <- sym(y)
x_quo <- enquo(x)
y_quo <- enquo(y)
ggplot(data) + geom_boxplot(aes(x = !! x_quo, y = !! y_quo, group = !! x_quo)) +
theme_bw()
}
# compute plots
vars <- dplyr::select(Auto, -name) %>% names(.)
plots <- map(vars, ~ plot.fun(Auto, mpg01, .x))
# plot
plot_grid(plotlist = plots, ncol = 3)
split <- createDataPartition(y = Auto$mpg01, p = 0.4, list = FALSE)
Train <- Auto[split,]
Test <- Auto[-split,]
roc.stats("logit", Test$mpg01, Test$mpg01.p)
mod.1 <- glm(mpg01 ~ displacement + horsepower + weight + year + cylinders,
data = Train, family = binomial("logit"))
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
roc <- roc(Test$mpg01, Test$mpg01.p)
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value,
mod, "auc", auc(x))
}
roc.stats("logit", Test$mpg01, Test$mpg01.p)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > "0.9784", 1, 0),
false.pred = ifelse(mpg01.p != mpg01, 0, 1))
mean(Test$false.pred)
table(Test$false.pred)
View(Test)
knitr::opts_chunk$set(
warnings = FALSE, include = FALSE, echo = FALSE, fig.align = "center", fig.width = 10, fig.height = 8)
packages <- c("purrr", "tidyverse", "caret", "ISLR", "GGally", "rlang", "cowplot", "pROC")
lapply(packages, require, character.only = TRUE)
# source("../../packages.r")
Auto <- Auto %>% mutate(mpg01 = ifelse(mpg > median(mpg, na.rm = TRUE), 1, 0))
Auto %>% dplyr::select(-name) %>% ggpairs
plot.fun <- function(data, x, y) {
y <- sym(y)
x_quo <- enquo(x)
y_quo <- enquo(y)
ggplot(data) + geom_boxplot(aes(x = !! x_quo, y = !! y_quo, group = !! x_quo)) +
theme_bw()
}
# compute plots
vars <- dplyr::select(Auto, -name) %>% names(.)
plots <- map(vars, ~ plot.fun(Auto, mpg01, .x))
# plot
plot_grid(plotlist = plots, ncol = 3)
split <- createDataPartition(y = Auto$mpg01, p = 0.4, list = FALSE)
Train <- Auto[split,]
Test <- Auto[-split,]
mod.1 <- glm(mpg01 ~ displacement + horsepower + weight + year + cylinders,
data = Train, family = binomial("logit"))
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
roc <- roc(Test$mpg01, Test$mpg01.p)
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value,
mod, "auc", auc(x))
}
roc.stats("logit", Test$mpg01, Test$mpg01.p)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > 0.9784, 1, 0),
false.pred = ifelse(mpg01.p != mpg01, 0, 1))
mod.1 <- glm(mpg01 ~ displacement + horsepower + weight + year + cylinders,
data = Train, family = binomial("logit"))
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
roc <- roc(Test$mpg01, Test$mpg01.p)
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value,
mod, "auc", auc(x))
}
roc.stats("logit", Test$mpg01, Test$mpg01.p)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > 0.9784, 1, 0),
false.pred = ifelse(mpg01.p != mpg01, 0, 1))
mean(Test$false.pred)
table(Test$false.pred)
roc.stats("logit", Test$mpg01, Test$mpg01.p)
knitr::opts_chunk$set(
warnings = FALSE, include = FALSE, echo = FALSE, fig.align = "center", fig.width = 10, fig.height = 8)
packages <- c("purrr", "tidyverse", "caret", "ISLR", "GGally", "rlang", "cowplot", "pROC")
lapply(packages, require, character.only = TRUE)
# source("../../packages.r")
Auto <- Auto %>% mutate(mpg01 = ifelse(mpg > median(mpg, na.rm = TRUE), 1, 0))
Auto %>% dplyr::select(-name) %>% ggpairs
plot.fun <- function(data, x, y) {
y <- sym(y)
x_quo <- enquo(x)
y_quo <- enquo(y)
ggplot(data) + geom_boxplot(aes(x = !! x_quo, y = !! y_quo, group = !! x_quo)) +
theme_bw()
}
# compute plots
vars <- dplyr::select(Auto, -name) %>% names(.)
plots <- map(vars, ~ plot.fun(Auto, mpg01, .x))
# plot
plot_grid(plotlist = plots, ncol = 3)
split <- createDataPartition(y = Auto$mpg01, p = 0.4, list = FALSE)
Train <- Auto[split,]
Test <- Auto[-split,]
mod.1 <- glm(mpg01 ~ displacement + horsepower + weight + year + cylinders,
data = Train, family = binomial("logit"))
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
roc <- roc(Test$mpg01, Test$mpg01.p)
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value,
mod, "auc", auc(x))
}
roc.stats("logit", Test$mpg01, Test$mpg01.p)
auc(roc)
is.numeric(auc(roc))
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > auc(roc), 1, 0),
false.pred = ifelse(mpg01.p != mpg01, 0, 1))
View(Test)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > auc(roc), 1, 0),
false.pred = ifelse(mpg01.pred != mpg01, 0, 1))
table(Test$false.pred)
mean(Test$false.pred)
table(Test$false.pred)
47/(47 + 187)
mean(Test$false.pred)
table(Test$false.pred)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > auc(roc), 1, 0),
false.pred = ifelse(mpg01.pred != mpg01, 1, 0))
mean(Test$false.pred)
knitr::opts_chunk$set(
warnings = FALSE, include = FALSE, echo = FALSE, fig.align = "center", fig.width = 10, fig.height = 8)
packages <- c("purrr", "tidyverse", "caret", "ISLR", "GGally", "rlang", "cowplot", "pROC")
lapply(packages, require, character.only = TRUE)
# source("../../packages.r")
Auto <- Auto %>% mutate(mpg01 = ifelse(mpg > median(mpg, na.rm = TRUE), 1, 0))
Auto %>% dplyr::select(-name) %>% ggpairs
plot.fun <- function(data, x, y) {
y <- sym(y)
x_quo <- enquo(x)
y_quo <- enquo(y)
ggplot(data) + geom_boxplot(aes(x = !! x_quo, y = !! y_quo, group = !! x_quo)) +
theme_bw()
}
# compute plots
vars <- dplyr::select(Auto, -name) %>% names(.)
plots <- map(vars, ~ plot.fun(Auto, mpg01, .x))
# plot
plot_grid(plotlist = plots, ncol = 3)
set.seed(123)
split <- createDataPartition(y = Auto$mpg01, p = 0.4, list = FALSE)
Train <- Auto[split,]
Test <- Auto[-split,]
mod.1 <- glm(mpg01 ~ displacement + horsepower + weight + year + cylinders,
data = Train, family = binomial("logit"))
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
roc <- roc(Test$mpg01, Test$mpg01.p)
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value,
mod, "auc", auc(x))
}
roc.stats("logit", Test$mpg01, Test$mpg01.p)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > auc(roc), 1, 0),
false.pred = ifelse(mpg01.pred != mpg01, 1, 0))
# test error
mean(Test$false.pred)
library(engsoccerdata)
Ger <- germany
View(Ger)
?train
try(setwd("C:/Users/Moritz/OneDrive/GitHub/Trende_jazzmoe/kaggle-challenges/titanic-survivers"), silent = TRUE)
setwd("C:/Users/Moritz/OneDrive/GitHub/Trende_jazzmoe/kaggle-challenges/titanic-survivers")
packages <- c("purrr", "tidyverse", "caret", "ISLR", "GGally", "rlang", "cowplot", "pROC", "e1071")
lapply(packages, require, character.only = TRUE)
knitr::opts_chunk$set(
warnings = FALSE, include = FALSE, echo = FALSE, fig.align = "center", fig.width = 10, fig.height = 8)
packages <- c("purrr", "tidyverse", "caret", "ISLR", "GGally", "rlang", "cowplot", "pROC", "e1071")
lapply(packages, require, character.only = TRUE)
# source("../../packages.r")
Auto <- Auto %>% mutate(mpg01 = ifelse(mpg > median(mpg, na.rm = TRUE), 1, 0))
Auto %>% dplyr::select(-name) %>% ggpairs
plot.fun <- function(data, x, y) {
y <- sym(y)
x_quo <- enquo(x)
y_quo <- enquo(y)
ggplot(data) + geom_boxplot(aes(x = !! x_quo, y = !! y_quo, group = !! x_quo)) +
theme_bw()
}
# compute plots
vars <- dplyr::select(Auto, -name) %>% names(.)
plots <- map(vars, ~ plot.fun(Auto, mpg01, .x))
# plot
plot_grid(plotlist = plots, ncol = 3)
set.seed(123)
split <- createDataPartition(y = Auto$mpg01, p = 0.4, list = FALSE)
Train <- Auto[split,]
Test <- Auto[-split,]
mod.1 <- glm(mpg01 ~ displacement + horsepower + weight + year + cylinders,
data = Train, family = binomial("logit"))
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
roc <- roc(Test$mpg01, Test$mpg01.p)
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value,
mod, "auc", auc(x))
}
roc.stats("logit", Test$mpg01, Test$mpg01.p)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > auc(roc), 1, 0),
false.pred = ifelse(mpg01.pred != mpg01, 1, 0))
# test error
mean(Test$false.pred)
mod.knn <- train(, method='knn')
knitr::opts_chunk$set(
warnings = FALSE, echo = FALSE, fig.align = "center", fig.width = 10, fig.height = 8)
packages <- c("purrr", "tidyverse", "caret", "ISLR", "GGally", "rlang", "cowplot", "pROC", "e1071")
lapply(packages, require, character.only = TRUE)
# source("../../packages.r")
Auto <- Auto %>% mutate(mpg01 = ifelse(mpg > median(mpg, na.rm = TRUE), 1, 0))
Auto %>% dplyr::select(-name) %>% ggpairs
plot.fun <- function(data, x, y) {
y <- sym(y)
x_quo <- enquo(x)
y_quo <- enquo(y)
ggplot(data) + geom_boxplot(aes(x = !! x_quo, y = !! y_quo, group = !! x_quo)) +
theme_bw()
}
# compute plots
vars <- dplyr::select(Auto, -name) %>% names(.)
plots <- map(vars, ~ plot.fun(Auto, mpg01, .x))
# plot
plot_grid(plotlist = plots, ncol = 3)
set.seed(123)
split <- createDataPartition(y = Auto$mpg01, p = 0.4, list = FALSE)
Train <- Auto[split,]
Test <- Auto[-split,]
mod.1 <- glm(mpg01 ~ displacement + horsepower + weight + year + cylinders,
data = Train, family = binomial("logit"))
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
roc <- roc(Test$mpg01, Test$mpg01.p)
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value,
mod, "auc", auc(x))
}
roc.stats("logit", Test$mpg01, Test$mpg01.p)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > auc(roc), 1, 0),
false.pred = ifelse(mpg01.pred != mpg01, 1, 0))
# test error
mean(Test$false.pred)
mod.knn <- train(, method='knn')
knitr::opts_chunk$set(
warnings = FALSE, echo = FALSE, fig.align = "center", fig.width = 10, fig.height = 8)
packages <- c("purrr", "tidyverse", "caret", "ISLR", "GGally", "rlang", "cowplot", "pROC", "e1071")
lapply(packages, require, character.only = TRUE)
# source("../../packages.r")
Auto <- Auto %>% mutate(mpg01 = ifelse(mpg > median(mpg, na.rm = TRUE), 1, 0))
Auto %>% dplyr::select(-name) %>% ggpairs
plot.fun <- function(data, x, y) {
y <- sym(y)
x_quo <- enquo(x)
y_quo <- enquo(y)
ggplot(data) + geom_boxplot(aes(x = !! x_quo, y = !! y_quo, group = !! x_quo)) +
theme_bw()
}
# compute plots
vars <- dplyr::select(Auto, -name) %>% names(.)
plots <- map(vars, ~ plot.fun(Auto, mpg01, .x))
# plot
plot_grid(plotlist = plots, ncol = 3)
set.seed(123)
split <- createDataPartition(y = Auto$mpg01, p = 0.4, list = FALSE)
Train <- Auto[split,]
Test <- Auto[-split,]
mod.1 <- glm(mpg01 ~ displacement + horsepower + weight + year + cylinders,
data = Train, family = binomial("logit"))
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
roc <- roc(Test$mpg01, Test$mpg01.p)
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value,
mod, "auc", auc(x))
}
roc.stats("logit", Test$mpg01, Test$mpg01.p)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > auc(roc), 1, 0),
false.pred = ifelse(mpg01.pred != mpg01, 1, 0))
# test error
mean(Test$false.pred)
# mod.knn <- train(, method='knn')
knitr::opts_chunk$set(
warnings = FALSE, include = FALSE, fig.align = "center", fig.width = 10, fig.height = 8)
packages <- c("purrr", "tidyverse", "caret", "ISLR", "GGally", "rlang", "cowplot", "pROC", "e1071")
lapply(packages, require, character.only = TRUE)
# source("../../packages.r")
Auto <- Auto %>% mutate(mpg01 = ifelse(mpg > median(mpg, na.rm = TRUE), 1, 0))
Auto %>% dplyr::select(-name) %>% ggpairs
plot.fun <- function(data, x, y) {
y <- sym(y)
x_quo <- enquo(x)
y_quo <- enquo(y)
ggplot(data) + geom_boxplot(aes(x = !! x_quo, y = !! y_quo, group = !! x_quo)) +
theme_bw()
}
# compute plots
vars <- dplyr::select(Auto, -name) %>% names(.)
plots <- map(vars, ~ plot.fun(Auto, mpg01, .x))
# plot
plot_grid(plotlist = plots, ncol = 3)
set.seed(123)
split <- createDataPartition(y = Auto$mpg01, p = 0.4, list = FALSE)
Train <- Auto[split,]
Test <- Auto[-split,]
mod.1 <- glm(mpg01 ~ displacement + horsepower + weight + year + cylinders,
data = Train, family = binomial("logit"))
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
roc <- roc(Test$mpg01, Test$mpg01.p)
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value,
mod, "auc", auc(x))
}
roc.stats("logit", Test$mpg01, Test$mpg01.p)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > auc(roc), 1, 0),
false.pred = ifelse(mpg01.pred != mpg01, 1, 0))
# test error
mean(Test$false.pred)
# mod.knn <- train(, method='knn')
knitr::opts_chunk$set(
warnings = FALSE, fig.align = "center", fig.width = 10, fig.height = 8)
packages <- c("purrr", "tidyverse", "caret", "ISLR", "GGally", "rlang", "cowplot", "pROC", "e1071")
lapply(packages, require, character.only = TRUE)
# source("../../packages.r")
knitr::opts_chunk$set(
warnings = FALSE, fig.align = "center", fig.width = 10, fig.height = 8)
packages <- c("purrr", "tidyverse", "caret", "ISLR", "GGally", "rlang", "cowplot", "pROC", "e1071")
lapply(packages, require, character.only = TRUE)
# source("../../packages.r")
Auto <- Auto %>% mutate(mpg01 = ifelse(mpg > median(mpg, na.rm = TRUE), 1, 0))
Auto %>% dplyr::select(-name) %>% ggpairs
plot.fun <- function(data, x, y) {
y <- sym(y)
x_quo <- enquo(x)
y_quo <- enquo(y)
ggplot(data) + geom_boxplot(aes(x = !! x_quo, y = !! y_quo, group = !! x_quo)) +
theme_bw()
}
# compute plots
vars <- dplyr::select(Auto, -name) %>% names(.)
plots <- map(vars, ~ plot.fun(Auto, mpg01, .x))
# plot
plot_grid(plotlist = plots, ncol = 3)
set.seed(123)
split <- createDataPartition(y = Auto$mpg01, p = 0.4, list = FALSE)
Train <- Auto[split,]
Test <- Auto[-split,]
mod.1 <- glm(mpg01 ~ displacement + horsepower + weight + year + cylinders,
data = Train, family = binomial("logit"))
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
roc <- roc(Test$mpg01, Test$mpg01.p)
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value,
mod, "auc", auc(x))
}
roc.stats("logit", Test$mpg01, Test$mpg01.p)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > auc(roc), 1, 0),
false.pred = ifelse(mpg01.pred != mpg01, 1, 0))
# test error
mean(Test$false.pred)
# mod.knn <- train(, method='knn')
# knitr::opts_chunk$set(warnings = FALSE, fig.align = "center", fig.width = 10, fig.height = 8)
packages <- c("purrr", "tidyverse", "caret", "ISLR", "GGally", "rlang", "cowplot", "pROC", "e1071")
lapply(packages, require, character.only = TRUE)
# source("../../packages.r")
Auto <- Auto %>% mutate(mpg01 = ifelse(mpg > median(mpg, na.rm = TRUE), 1, 0))
Auto %>% dplyr::select(-name) %>% ggpairs
plot.fun <- function(data, x, y) {
y <- sym(y)
x_quo <- enquo(x)
y_quo <- enquo(y)
ggplot(data) + geom_boxplot(aes(x = !! x_quo, y = !! y_quo, group = !! x_quo)) +
theme_bw()
}
# compute plots
vars <- dplyr::select(Auto, -name) %>% names(.)
plots <- map(vars, ~ plot.fun(Auto, mpg01, .x))
# plot
plot_grid(plotlist = plots, ncol = 3)
set.seed(123)
split <- createDataPartition(y = Auto$mpg01, p = 0.4, list = FALSE)
Train <- Auto[split,]
Test <- Auto[-split,]
mod.1 <- glm(mpg01 ~ displacement + horsepower + weight + year + cylinders,
data = Train, family = binomial("logit"))
Test$mpg01.p <- predict(mod.1, newdata = Test, type = "response")
roc <- roc(Test$mpg01, Test$mpg01.p)
roc.stats <- function(mod, x, y) {
x <- roc(x, y)
tribble(~model, ~ stats, ~ value,
mod, "auc", auc(x))
}
roc.stats("logit", Test$mpg01, Test$mpg01.p)
Test <- Test %>% mutate(mpg01.pred = ifelse(mpg01.p > auc(roc), 1, 0),
false.pred = ifelse(mpg01.pred != mpg01, 1, 0))
# test error
mean(Test$false.pred)
# mod.knn <- train(, method='knn')
library(engsoccerdata)
Ger <- germany
